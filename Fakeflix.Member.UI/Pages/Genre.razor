@inject IMembershipService MembershipService

@page "/Genre/{genre}"

<a href="@("/")" class="d-flex align-items-center back-link bg-dark rounded align-items-end">
    <div class="card-body d-flex justify-content-center align-items-center">
        <h5 class="oi oi-arrow-circle-left">  Start</h5>
    </div>
</a>

<div class="film-cards-container">
    <div class="d-flex flex-column justify-content-left film-cards-wrapper">
        <h1 class="genre">@genre</h1>
        <div class="d-flex flex-wrap justify-content-left align-items-start">
            @foreach (var film in matchingFilms)
            {
                <div class="m-2">
                    <FilmCard Film="@film" />
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string genre { get; set; }
    public GenreDTO Genres { get; set; } = new();
    public List<FilmDTO> matchingFilms { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var films = await MembershipService.GetFilmsAsync();
        var genres = await MembershipService.GetGenresAsync();
        var filmGenres = await MembershipService.GetFilmGenresAsync();

        Genres = genres.FirstOrDefault(g => g.Name == genre);
        if (Genres == null)
        {
            // handle error: genre not found
            return;
        }

        var filmIds = filmGenres.Where(fg => fg.GenreId == Genres.Id).Select(fg => fg.FilmId).ToList();
        matchingFilms = films.Where(f => filmIds.Contains(f.Id)).ToList();
    }
}
