@inject IMembershipService MembershipService
@page "/"

<PageTitle>Fakeflix</PageTitle>

<div class="film-cards-container">
    <div class="d-flex flex-column justify-content-left film-cards-wrapper">
        @foreach (var genre in Genres)
        {
            var filmIds = FilmGenres.Where(fg => fg.GenreId == genre.Id).Select(fg => fg.FilmId).ToList();
            var matchingFilms = Films.Where(f => filmIds.Contains(f.Id)).ToList();

            if (matchingFilms.Count > 0)
            {
                <h2 class="genre">@genre.Name</h2>

                <div class="d-flex flex-wrap justify-content-left align-items-start">
                    @foreach (var film in matchingFilms.Take(4).OrderBy(x => Guid.NewGuid()).ToList())
                    {
                        <div class="m-2">
                            <FilmCard Film="@film" />
                        </div>
                    }
                    <a href="@($"Genre/{genre.Name}")" class="d-flex align-items-center genre-link bg-dark rounded align-items-end">
                        <div class="card-body d-flex justify-content-center align-items-center">
                            <h5 class="genre-arrow oi oi-arrow-circle-right"></h5>
                        </div>
                    </a>
                </div>
            }
        }
    </div>
</div>

@code {
    public List<FilmDTO> Films { get; set; } = new();
    public List<GenreDTO> Genres { get; set; } = new();
    public List<FilmGenreDTO> FilmGenres { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Films = await MembershipService.GetFilmsAsync();
        Genres = await MembershipService.GetGenresAsync();
        FilmGenres = await MembershipService.GetFilmGenresAsync();
    }
}
