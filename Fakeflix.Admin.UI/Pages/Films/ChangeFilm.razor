@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">

    <EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">

        <DataAnnotationsValidator />
        <h4>@Page Film</h4>
        <div class="mb-3">
            @if (Page.Equals(PageType.Delete))
            {
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
            }
@*            else
            {
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" placeholder="Title2"></InputText>
            }*@
            <ValidationMessage For="@(() => Model.Title)" />
        </div>

        @if (!Page.Equals(PageType.Delete))
        {
            <div class="mb-3">
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Title" placeholder="Title"></InputText>
                <ValidationMessage For="@(() => Model.Title)" />
            </div>
            <div class="mb-3">
                <InputText id="title" class="form-control me-2" @bind-Value="Model.Description" placeholder="Description"></InputText>
                <ValidationMessage For="@(() => Model.Description)" />
            </div>

            <div class="mb-3">
                <InputText id="image-url" class="form-control me-2" @bind-Value="Model.FilmUrl" placeholder="URL"></InputText>
                <ValidationMessage For="@(() => Model.FilmUrl)" />
            </div>

            <div class="form-group">
                <label for="datepicker">Released</label>
                <InputDate id="datepicker" class="form-control" @bind-Value="@Model.Released" />
            </div>

            <div class="mb-3">
                <label for="director">Director</label>
                <InputSelect id="director" class="form-control" @bind-Value="Model.DirectorId">
                    <option value="0">Select a director</option>
                    @foreach (var director in Directors)
                    {
                        <option value="@director.Id">@director.Name</option>
                    }
                </InputSelect>
            </div>

@*            <div class="mb-3">
                <label for="genres" class="form-label">Genres:</label>
                <select multiple class="form-control" id="genres" @bind="Genres">
                    @foreach (var genre in Genres)
                    {
                        <option value="@genre.Id">@genre.Name</option>
                    }
                </select>
            </div>

            <button class="btn btn-primary" @onclick="() => ShowGenreForm = true">Add Genre</button>

            @if (ShowGenreForm)
            {
                <div class="modal fade show" style="display: block;">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Add Genre</h5>
                                <button type="button" class="btn-close" @onclick="() => ShowGenreForm = false"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="existingGenres" class="form-label">Existing Genres:</label>
                                    <select class="form-control" id="existingGenres" @bind="selectedExistingGenre">
                                        <option value="">Choose an existing genre</option>
                                        @foreach (var genre in Genres)
                                        {
                                            <option value="@genre.Id">@genre.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="newGenre" class="form-label">New Genre:</label>
                                    <input type="text" class="form-control" id="newGenre" @bind="newGenre" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => ShowGenreForm = false">Cancel</button>
                                <button type="button" class="btn btn-primary" @onclick="AddGenre">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
            }*@


@*            <div class="mb-3">
                <InputText id="marquee-image-url" class="form-control me-2" @bind-Value="Model.MarqueeImageUrl" placeholder="Marquee Image Url"></InputText>
                <ValidationMessage For="@(() => Model.MarqueeImageUrl)" />
            </div>*@

            @*Genre - choose multiple*@
@*            <InputSelect @bind-Value="Model.Genres" class="form-control mb-3">
                <option value=0>Genre</option>
                @foreach (var director in Directors)
                {
                    <option value="@director.Id">@director.Name</option>
                }
            </InputSelect>*@

            <div class="mb-3">
                <label>
                    <InputCheckbox @bind-Value="Model.Free" />
                    Free
                </label>
            </div>
        }
        <button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
    </EditForm>
</div>

@code {
    [Parameter] public FilmDTO Model { get; set; } = new FilmDTO { Released = DateTime.Now };
    [Parameter] public string Page { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> OnChange { get; set; }
    List<DirectorDTO> Directors { get; set; } = new();
    List<GenreDTO> Genres { get; set; } = new();

    private bool ShowGenreForm = false;
    private int selectedExistingGenre;
    private string newGenre = "";

    protected override async Task OnInitializedAsync()
    {
        Directors = await AdminService.GetAsync<DirectorDTO>("director");
        Genres = await AdminService.GetAsync<GenreDTO>("genre");
    }

    private async Task OnFormSubmit()
    {
        try
        {
            if (Page.Equals(PageType.Create))
                await AdminService.CreateAsync<FilmDTO>("film", Model);
            else if (Page.Equals(PageType.Edit))
                await AdminService.EditAsync<FilmDTO>($"film/{Model.Id}", Model);
            else if (Page.Equals(PageType.Delete))
                await AdminService.DeleteAsync<FilmDTO>($"film/{Model.Id}");

            await OnChange.InvokeAsync("");
        }
        catch
        {
            await OnChange.InvokeAsync("Couldn't create/edit/delete the film.");
        }
    }

    private async Task AddGenre()
    {
        if (selectedExistingGenre != 0)
        {
            // Add an existing genre to the selected genres list
            //selectedGenres.Add(selectedExistingGenre);
        }
        else if (!string.IsNullOrEmpty(newGenre))
        {
            // Add a new genre to the selected genres list
            //var genre = new GenreDTO { Name = newGenre };
            //int newGenreId = await AdminService.CreateAsync(genre, "genres");
            //genre.Id = newGenreId;
            //selectedGenres.Add(newGenreId);
        }

        // Reset the form and close the modal
        selectedExistingGenre = 0;
        newGenre = "";
        ShowGenreForm = false;
    }


    //private async Task HandleSubmit()
    //{
    //    // Check if the director name is already in the database
    //    DirectorDTO director = await AdminService.GetDirectorByNameAsync(Model.DirectorName);
    //    if (director == null)
    //    {
    //        // If the director doesn't exist, add it to the database
    //        director = new DirectorDTO { Name = Model.DirectorName };
    //        int newDirectorId = await AdminService.CreateAsync(director, "directors");
    //        director.Id = newDirectorId;
    //    }

    //    // Set the selected director ID to the ID of the director we just created or retrieved
    //    Model.DirectorId = director.Id;
    //}
}
